{% extends 'base.html.twig' %}

{% block title %}Plants{% endblock %}

{% block body %}
    <div class="alert alert-success" role="alert">
        <h5>Plant [{{ plant.name }}]</h5>
    </div>
    <div class="alert alert-info" role="alert">
        <p class="mb-0">ID:{{ plant.id }} / Hostname:({{ plant.uniqId }})
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            uptime: {{ plant.uptime }} | {{ plant.uptime | ExecutionTimeWithDays }}
            &nbsp;&nbsp;/&nbsp;&nbsp;
            {{ uptime }} | {%  if uptime.propertyValue is defined and uptime.propertyValue is not null %} {{  uptime.propertyValue  | ExecutionTimeWithDays }} {% endif %}
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            Updated {{ plant.updatedAt ? plant.updatedAt | time_diff }}
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            resets: {{ plant.resetCounter }}
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            RSSI: {{ plant.rssi }}
            &nbsp;&nbsp;&nbsp;&nbsp;
            <input type="button" id="reloadPage" value="Reload" />
        </p>
    </div>
    {% apply spaceless %}
    <table class="table table-hover table-condensed tasks-table table-bordered">
        <tbody>
        <tr>
            <th style="width: 120px;">Temperature</th>
            <td style="width: 180px;">
                <span class="badge {{ temperatureToBadge(temperature? temperature.propertyValueString | number_format : 0)}}">
                    {{ temperature }}  &#8451;
                </span>
                <span class="font8">{{ temperature ? temperature.updatedAt | time_diff }}</span>
            </td>
            <th>Medium</th>
            <td><span class="badge badge-pill badge-success">{{ plant.soilMedium }}</span></td>
            <th>CreatedAt</th>
            <td>{{ plant.createdAt ? plant.createdAt|date('Y-m-d') : '' }}</td>
        </tr>
        <tr>
            <th>Humidity</th>
            <td>
                <span class="badge {{ humidityToBadge(humidity? humidity.propertyValueString| number_format : 0)}}">
                    {{ humidity }} %
                </span>
                <span class="font8">{{ humidity ? humidity.updatedAt | time_diff }}</span>
            </td>
            <th>Pot</th>
            <td><span class="badge badge-pill badge-secondary">{{ plant.pot }}</span></td>
            <th>StartedAt</th>
            <td>{{ plant.startedAt ? plant.startedAt|date('Y-m-d') : '' }} | {{ plant.startedAt ? plant.startedAt | time_diff }}</td>
        </tr>
        <tr>
            <th>Hydrometer</th>
            <td>
                <span class="badge {{ hydrometerToBadge(hydrometer.propertyValueString| number_format)}}">
                    {{ hydrometer }} %
                </span>
                <span class="font8">{{ hydrometer ? hydrometer.updatedAt | time_diff }}</span>
            </td>
            <th>Period</th>
            <td>{{ plant.periodName }}</td>
            <th>FinishedAt</th>
            <td>{{ plant.finishedAt ? plant.finishedAt|date('Y-m-d') : '' }}</td>
        </tr>
        <tr>
            <th>Light</th>
            <td><span class="badge {{ lightToBadge(plant.light) }}">{{ plant.light? "On" : "Off" }} </span> | <span class="badge ">{{ light.propertyValue() ? "On" : "Off" }} </span></td>
            <th></th>
            <td></td>
            <th>UpdatedAt</th>
            <td>{{ plant.updatedAt ? plant.updatedAt|date('d M H:i:s') : '' }} | {{ plant.updatedAt ? plant.updatedAt | time_diff }}</td>
        </tr>
        </tbody>
    </table>
    {% endapply %}
    <hr/>

    <canvas id="graph_container" style="width: 100%;height: 400px !important;"></canvas>

    <table style="width: 99%">
        <tr>
            <td>
                <button class="button btn btn-outline-warning btn-sm" type="button" id="toggleScale">Toggle Scale Type</button>
            </td>
            <td style="text-align: center">
                <div id="changeTime" class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups" style="width: 100%">
                    <div class="btn-group mr-2" role="group" aria-label="Time selection in day">
                        <button class="button btn btn-outline-success btn-sm" type="button" value="1">1 Hour</button>
                        <button class="button btn btn-outline-success btn-sm" type="button" value="3">3 H</button>
                        <button class="button btn btn-outline-success btn-sm" type="button" value="6">6 H</button>
                        <button class="button btn btn-outline-success btn-sm" type="button" value="12">12 H</button>
                        <button class="button btn btn-outline-success btn-sm" type="button" value="24">24 H</button>
                    </div>
                    <div class="btn-group mr-2" role="group" aria-label="Time selection">
                        <button class="button btn btn-outline-info btn-sm" type="button" value="36">36 Hours</button>
                    </div>
                    <div class="btn-group mr-2" role="group" aria-label="Time selection">
                        <button class="button btn btn-outline-dark btn-sm" type="button" value="48">2 Days</button>
                        <button class="button btn btn-outline-dark btn-sm" type="button" value="72">3 D</button>
                        <button class="button btn btn-outline-dark btn-sm" type="button" value="96">4 D</button>
                        <button class="button btn btn-outline-dark btn-sm" type="button" value="130">5 D</button>
                    </div>
                    <div class="btn-group mr-2" role="group" aria-label="Time selection">
                        <button class="button btn btn-outline-info btn-sm" type="button" value="170">1 Week</button>
                        <button class="button btn btn-outline-info btn-sm" type="button" value="340">2 W</button>
                    </div>
                    <div class="btn-group mr-2" role="group" aria-label="Time selection">
                        <button class="button btn btn-outline-primary btn-sm" type="button" value="731">1 Month</button>
                        <button class="button btn btn-outline-primary btn-sm" type="button" value="1461">2 M</button>
                        <button class="button btn btn-outline-primary btn-sm" type="button" value="2191">3 M</button>
                        <button class="button btn btn-outline-primary btn-sm" type="button" value="2921">4 M</button>
                        <button class="button btn btn-outline-primary btn-sm" type="button" value="4381">6 M</button>
                    </div>
                    <div class="btn-group" role="group" aria-label="Time selection">
                        <button class="button btn btn-outline-info btn-sm" type="button" value="8761">1 Y</button>
                    </div>
                </div>
            </td>
            <td style="text-align: right;">
                <a href="{{ path('event_new') }}">Create new Event</a>
            </td>
        </tr>
    </table>

    <script>

        function floorDate(datetime) {
            var newDate = new Date(datetime);
            //newDate.setHours(0);
            newDate.setMinutes(0);
            newDate.setSeconds(0);
            return newDate;
        }

        // Set chart options
        var optionsHourly = {
            'title': 'Hourly',
            // 'width': 1200,
            // 'height': 400,
            timeline: {
                groupByRowLabel: true
            },
            is3D:true,
            hAxis: {
                format: 'd HH:mm',
                gridlines: {count: 24}
            },
            legend: {position: 'top', maxLines: 3}
        };


        function drawHumidityHourly() {
            var data = new google.visualization.DataTable();
            data.addColumn('datetime', 'Time');
            data.addColumn('number', 'Humidity');
            data.addRows([
                {% for id, sensor in sensorsObj %}
                {% set type = sensor.eventType | parseType %}
                {% if type == 'Humidity' %}
                {% for event in sensors[id] | slice(0, 10000) %}[new Date({{ event.createdAt|date('Y, m, d, H, i, 0') }}), {{ event.value }}],{% endfor %}{% endif %}
                {% endfor %}
            ]);

            var newData = google.visualization.data.group(data, [{
                column: 0,
                modifier: floorDate,
                type: 'datetime'
            }], [{
                column: 1,
                label: 'HumidityAvg',
                aggregation: google.visualization.data.avg,
                type: 'number'
            }]);
            // Instantiate and draw our chart, passing in some options.
            var chart = new google.visualization.ColumnChart(document.getElementById('divHumidityHourly'));
            optionsHourly['colors'] = ['#fccd55'];
            optionsHourly['vAxis'] = {
                viewWindowMode: 'explicit',
                viewWindow: {
                    max: 100,
                    min: 0
                }
            };
            chart.draw(newData, optionsHourly);
        }

        function drawTemperatureHourly() {
            var data = new google.visualization.DataTable();
            data.addColumn('datetime', 'Time');
            data.addColumn('number', 'Temperature');
            data.addRows([
                {% for id, sensor in sensorsObj %}
                {% set type = sensor.eventType | parseType %}
                {% if type == 'Temperature' %}{% for event in sensors[id] | slice(0, 10000) %}[new Date({{ event.createdAt|date('Y, m, d, H, i, 0') }}), {{ event.value }}],{% endfor %}{% endif %}
                {% endfor %}
            ]);

            var newData = google.visualization.data.group(data, [{
                column: 0,
                modifier: floorDate,
                type: 'datetime'
            }], [{
                column: 1,
                label: 'Temperature',
                aggregation: google.visualization.data.avg,
                type: 'number'
            }
            ]);
            // Instantiate and draw our chart, passing in some options.
            var chart = new google.visualization.ColumnChart(document.getElementById('divTemperatureHourly'));
            optionsHourly['colors'] = ['#86b9c9'];
            optionsHourly['vAxis'] = {
                viewWindowMode: 'explicit',
                viewWindow: {
                    max: 'auto',
                    min: 'auto',
                }
            };
            chart.draw(newData, optionsHourly);
        }

        /**
         *
         */
        function drawSoilHydrometerHourly() {
            var data = new google.visualization.DataTable();
            data.addColumn('datetime', 'Time');
            data.addColumn('number', 'SoilHydrometer');
            data.addRows([
                {% for id, sensor in sensorsObj %}
                {% set type = sensor.eventType | parseType %}
                {% if type == 'SoilHydrometer' %}{% for event in sensors[id] | slice(0, 10000) %}[new Date({{ event.createdAt|date('Y, m, d, H, i, 0') }}), {{ event.value }}],{% endfor %}{% endif %}{% endfor %}
            ]);

            var newData = google.visualization.data.group(data, [{
                column: 0,
                modifier: floorDate,
                type: 'datetime'
            }], [{
                column: 1,
                label: 'HydrometerAvg',
                aggregation: google.visualization.data.avg,
                type: 'number'
            }]);
            var chart = new google.visualization.ColumnChart(document.getElementById('divSoilHydrometerHourly'));
            optionsHourly['colors'] = ['#06C3C0','#DA68A0','#657CD0','#777B80','#7C6D70','#7C0850','#F75870'];
            optionsHourly['vAxis'] = {
                viewWindowMode: 'explicit',
                viewWindow: {
                    max: 100,
                    min: 0
                }
            };
            chart.draw(newData, optionsHourly);
        }

        var scaleType = 'linear';
        window.onload = function() {
            //var ctx = $('#myChart');
            var graph_container = $('#graph_container');
            //window.myLine = new Chart(ctx, config);
            window.myLine = new Chart(graph_container, graph_config);

        };
        $( document ).ready(function() {
            // Add button handler
            $('#changeTime').on('click','button', function (evt) {
                window.location = '{{ path('plant_show', {'id': plant.id}) }}/hours/' + this.value;
            });
            // Load graphs
            google.load('visualization', '1.1', {'packages': ['corechart']});
            google.setOnLoadCallback(drawHumidityHourly);
            google.setOnLoadCallback(drawTemperatureHourly);
            google.setOnLoadCallback(drawSoilHydrometerHourly);


            $('#reloadPage').click(function() {
                location.reload();
            });
        });

        var color = Chart.helpers.color;
        function CustomOnClickAction(e, legendItem) {
            var index = legendItem.datasetIndex;
            var ci = this.chart;
            var meta = ci.getDatasetMeta(index);
            // See controller.isDatasetVisible comment
            meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;
            // We hid a dataset ... rerender the chart
            ci.update();
        }
        var graph_config = {
            type: 'line',
            data: {
                datasets: [
                    {% for id, sensor in sensorsObj %}
                    {% set type = sensor.eventType | parseType %}
                    {% set color = 'window.chartColors.red' %}
                    {% if type == 'Humidity' %}{% set color = 'window.chartColors.yellow' %}{% endif %}
                    {% if type == 'Temperature' %}{% set color = 'window.chartColors.blue' %}{% endif %}
                    {% if type == 'SoilHydrometer' %}{% set color = 'window.chartColors.green' %}{% endif %}
                    {% if type == 'Event' %}{% set color = 'window.chartColors.purple' %}{% endif %}
                    {% if sensor.plant.id != plant.id %}{% set color = 'window.chartColors.grey' %}{% endif %}
                    {
                        sensorId: {{ id }},
                        sensorType: '{{ type }}',
                        sensorName: '{{ sensor.name}}',
                        label: '{{ sensor.name }}',
                        backgroundColor: color({{ color }}).alpha(0.25).rgbString(),
                        borderColor: {{ color }},
                        fill: {{ type == 'Humidity' ? 'true' : 'false' }},
                        lineTension: 0,
                        {% if sensor.plant.id != plant.id %}
                        borderWidth: 1,
                        pointRadius: 4,
                        {% else %}
                        borderWidth: 2,
                        pointRadius: 5,
                        {% endif %}
                        data:[{% for event in sensors[id] | slice(0, 10000)%}{x:'{{ event.createdAt|date('Y-m-d H:i') }}',y:{{ event.value }},},{% endfor %}],
                        //pointStyle: 'rectRot',
                        //pointBorderColor: 'rgb(0, 0, 0)'
                    },{% endfor %}
                ]
            },
            options: {
                legend: {
                    display: true,
                    position: 'right',
                    onClick: CustomOnClickAction,
                    labels: {
                        fontColor: 'rgb(255, 99, 132)',
                        fontSize: 10,
                        fontFamily: 'Helvetica',
                        usePointStyle: true,
                        fontStyle: 'normal'
                    }
                },
                responsive: true,
                title: {
                    display: true,
                    text: '{{ plant.name }} [{{ hours }} hours]'
                },
                scales: {
                    xAxes: [{
                        type: 'time',
                        display: true,
                        time: {
                            unit: 'quarter',
                            displayFormats: {
                                quarter: 'D/M H:mm'  // https://www.chartjs.org/docs/latest/axes/cartesian/time.html
                            }
                        },
                        distribution: 'linear',
                        scaleLabel: {
                            display: true,
                            labelString: 'Date'
                        },
                        ticks: {
                            source: 'data',  // add timeprint on bottom for each points
                            autoSkip: true,
                            major: {
                                fontStyle: 'bold',
                                fontColor: '#FF0000'
                            }
                        }
                    }],
                    yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'value'
                        }
                    }]
                },
                tooltips: {
                    intersect: false,
                    mode: 'point',
                    callbacks: {
                        label: function(tooltipItem, myData) {
                            var obj = myData.datasets[tooltipItem.datasetIndex];
                            var label = obj.label || '';
                            if (label) {
                                label += '         ';
                            }
                            label += obj['sensorType'] + ':' + parseFloat(tooltipItem.value); // .toFixed(4)
                            return label;
                        }
                    }
                }
            }
        };

        document.getElementById('toggleScale').addEventListener('click', function() {
            scaleType = scaleType === 'linear' ? 'logarithmic' : 'linear';
            //window.myLine.options.title.text = 'Chart.js Line Chart - ' + scaleType;
            window.myLine.options.scales.yAxes[0] = {
                display: true,
                type: scaleType
            };
            window.myLine.update();
        });
    </script>

    <h5>Sensors {{ plant.sensors | length }}</h5>
    <hr/>
    {% apply spaceless %}
    <table class="table table-hover table-striped table-condensed tasks-table table-bordered">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Last Value</th>
                <th>Value1</th>
                <th>Value2</th>
                <th>Value3</th>
                <th>Last Time</th>
                <th>Type</th>
                <th>Count</th>
                <th>TH</th>
                <th>Force sec</th>
{#                <th>UniqID</th>#}
            </tr>
        </thead>
        <tbody>
        {% for sensor in plant.sensors | slice(0, 100)%}
            {% set type = sensor.eventType | parseType  %}
            {% set _have_last = false %}
            {% set _created = '' %}
            {% if sensor.supportEvents and sensor.lastEvent is defined and sensor.lastEvent.value is defined%}
                {% set _have_last = true %}
                {% set _created = sensor.lastEvent.createdAt %}
            {% endif %}
            <tr>
                <td style="font-size: 10px;">{{ sensor.id }}</td>
                <td><a href="{{ path('sensor_show', {'id': sensor.id}) }}">{{ sensor.name }}</a></td>
                <td>
                    {% if _have_last == true %}
                        {% set _value = sensor.lastEvent.value %}
                        {% if type == 'Humidity' %}
                            <span class="badge {{ humidityToBadge(_value)}}">{{ _value }} %</span>
                        {% elseif type == 'Temperature' %}
                            <span class="badge badge-pill {{ temperatureToBadge(_value)}}">{{ _value }} &#8451;</span>
                        {% elseif type == 'SoilHydrometer' %}
                            <span class="badge badge-pill {{ hydrometerToBadge(_value)}}">{{ _value }} %</span>
                        {% else %}
                           {{ _value }}
                        {% endif %}
                        {% set _value3 = sensor.lastEvent.value3 %}
                        {% if _value3 is not null %}
                            <span class="badge  badge-pill badge-dark">{{ _value3 }}</span>
                            {% if type == 'Humidity' %}
                                Heat index
                            {% endif %}
                        {% endif %}
                    {% endif %}
                </td>
                <td style="font-size: 10px;">{{ sensor.lastEvent.value1 }}</td>
                <td style="font-size: 10px;">{{ sensor.lastEvent.value2 }}</td>
                <td style="font-size: 10px;">{{ sensor.lastEvent.value3 }}</td>
                <td title="{{ _created | date('Y-m-d H:i:s')}} " style="font-size: 10px;">
                    {% if _have_last %}
                        {{ _created | time_diff}} ({{ sensor.lastEvent.ip }})
                    {% endif %}
                </td>
                <td><span title="{{ type }}" style="font-size: 10px;">{{ type | SensorTypeShort }}</span></td>
                <td style="font-size: 10px;">{{ sensor.events | length }}</td>
                <td style="font-size: 10px;">{{ sensor.diffThreshold }}</td>
                <td style="font-size: 10px;">{{ sensor.writeForceEveryXseconds }}</td>
{#                <td style="font-size: 10px;">{{ sensor.uniqId }}</td>#}
            </tr>
        {% endfor %}
        </tbody>
    </table>
    {% endapply %}
    <hr/>

    <div id="divTemperatureHourly" style="width: 100%;height: 400px !important;"></div>
    <div id="divHumidityHourly" style="width: 100%;height: 350px !important;"></div>
    <div id="divSoilHydrometerHourly" style="width: 100%;height: 300px !important;"></div>
    <hr/>
    <h5>Events without sensor | All events count {{ plant.events | length }}</h5>
    <hr/>
    {% apply spaceless %}
    <table class="table table-hover table-striped table-condensed tasks-table table-bordered">
        <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Type</th>
            <th>Value</th>
        </tr>
        </thead>
        <tbody>
        {% set counter = 0 %}
        {% for event in plant.events %}
            {% if counter > 1000 %}
            {% else %}
                {% if event.sensor is none %}
                    {% set counter = counter+1 %}
                    <tr>
                        <td>{{ event.id }}</td>
                        <td><a href="{{ path('event_show', {'id': event.id}) }}" target="_blank">{{ event.name }}</a></td>
                        <td>{{ event.type | parseType }}</td>
                        <td>{{ event.value }}</td>
                    </tr>
                {% endif %}
            {% endif %}
        {% endfor %}
        </tbody>
    </table>
    {% endapply %}
    <hr/>
    <h5>Other</h5>
    <hr/>
    <a href="{{ path('plant_index') }}">back to list</a>

    {% if is_granted('edit', plant) %}
        <a href="{{ path('plant_edit', {'id': plant.id}) }}">edit</a>
    {% endif %}

    {#{{ include('plant/_delete_form.html.twig') }}#}
{% endblock %}
