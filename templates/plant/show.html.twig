{% extends 'base.html.twig' %}

{% block title %}Plants{% endblock %}

{% block body %}
    <div class="row">
        <div class="col-sm-12 widget-container-col ui-sortable" id="widget-container-col-10">
            <div class="widget-box ui-sortable-handle" id="widget-box-10">
                <div class="widget-header widget-header-small">
                    <h5 class="widget-title smaller">DAY: {{ plant.days }} &nbsp;&nbsp;&nbsp;&nbsp; {{ plant.floweringDays }} [Week {{ plant.floweringWeek }}.{{ plant.floweringWeekDay }}]&nbsp;&nbsp;&nbsp;&nbsp;/
                        ID:{{ plant.id }} / Hostname:({{ plant.uniqId }}) -
                        {% if uptime.propertyValue is defined and uptime.propertyValue is not null %}
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            Uptime {{  uptime.propertyValue  | ExecutionTimeWithDays }}
                        {% endif %}
                    </h5>
                    <div class="widget-toolbar no-border">
                        <ul class="nav nav-tabs" id="myTab">
                            <li class="active"><a data-toggle="tab" href="#home">Home</a></li>
                            <li><a data-toggle="tab" href="#customFields">Custom fields</a></li>
                            <li><a data-toggle="tab" href="#options">Options</a></li>
                            <li><a data-toggle="tab" href="#info">Info&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</a></li>
                        </ul>
                    </div>
                </div>
                <div class="widget-body">
                    <div class="widget-main padding-6">
                        <div class="tab-content">
                            <div id="home" class="tab-pane in active">
                                <input type="button" id="reloadPage" value="&nbsp;&nbsp;&nbsp;Reload&nbsp;&nbsp;&nbsp;" /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                <input class="btn btn-xs btn-link" type="button" id="addComment" value="New Comment" />
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                <input class="btn btn-xs btn-link" type="button" id="feedPlant" value="Feed" />
                                Updated {{ plant.updatedAt ? plant.updatedAt | time_diff }}
                            </div>

                            <div id="customFields" class="tab-pane">
                                {% include 'plant/plant.custom.fields.html.twig' %}
                            </div>

                            <div id="options" class="tab-pane">
                                <input class="btn btn-xs btn-danger" type="button" id="rebootNode" value="Reboot" />
                            </div>

                            <div id="info" class="tab-pane">
                                <div class="alert alert-info" role="alert">
                                <p class="mb-0">
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                Resets: {{ plant.resetCounter }}
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                RSSI: {{ plant.rssi }}
                                Version: {{ plant.version }}
                                &nbsp;&nbsp;&nbsp;&nbsp;
                                    uptime: {{ plant.uptime }} | {{ plant.uptime | ExecutionTimeWithDays }}
                                    &nbsp;&nbsp;/&nbsp;&nbsp;
                                    {{ uptime }} | {%  if uptime.propertyValue is defined and uptime.propertyValue is not null %} {{  uptime.propertyValue  | ExecutionTimeWithDays }} {% endif %}
                                </p>
                                </div>
                                <table class="table">
                                    <tbody>
                                    <tr>
                                        <th>Created At</th>
                                        <td>{{ plant.createdAt ? plant.createdAt|date('Y-m-d') : '' }}</td>
                                    </tr>
                                    <tr>
                                        <th>Started At</th>
                                        <td><span class="badge badge-info" title="{{ plant.startedAt ? plant.startedAt|date('Y-m-d') : '' }} | {{ plant.startedAt ? plant.startedAt | time_diff }}">{{ days }}</span></td>
                                    </tr>
                                    <tr>
                                        <th>Finished At</th>
                                        <td><strong>~ {{ toFinishDays }}</strong>  {{ plant.finishedAt ? plant.finishedAt|date('Y-m-d') : '' }}</td>
                                    </tr>
                                    <tr>
                                        <th>Updated At</th>
                                        <td>{{ plant.updatedAt ? plant.updatedAt|date('m-d H:i') : '' }} | {{ plant.updatedAt ? plant.updatedAt | time_diff }}</td>
                                    </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    {% apply spaceless %}
    <div class="row">
        <div class="col-sm-12">
            <h3 class="header smaller lighter green">Plant [{{ plant.name }}]</h3>
            <div class="row">
                <div class="col-xs-10 infobox-container">

                    <div class="infobox {{ temperature.propertyValue ? temperatureToInfoBox(temperature.propertyValue) }}">
                        <div class="infobox-icon"><i class="ace-icon fa fa-asterisk blue"></i></div>

                        <div class="infobox-data" title="Temperature">
                            <span class="infobox-data-number">{{ temperature }}&#8451;</span>
                            <div class="infobox-content">{{ temperature ? temperature.updatedAt | time_diff }}</div>
                        </div>
                        {% if temperature_pc.propertyValue < 0 %}
                            <div class="stat stat-important">{{ temperature_pc.propertyValue }}%</div>
                        {% elseif humidity_pc.propertyValue > 0 %}
                            <div class="stat stat-success" title="{{ temperature_pc.propertyValueString }}">{{ temperature_pc.propertyValue }}%</div>
                        {% endif %}
                    </div>

                    <div class="infobox {{ humidity.propertyValue ? humidityToInfoBox(humidity.propertyValue) }}" title="Humidity">
                        <div class="infobox-icon"><i class="ace-icon fa fa-cloud grey"></i></div>

                        <div class="infobox-data">
                            <span class="infobox-data-number">{{ humidity }}%</span>
                            <div class="infobox-content">{{ humidity ? humidity.updatedAt | time_diff }}</div>
                        </div>
                        {% if humidity_pc.propertyValue < 0 %}
                            <div class="stat stat-important">{{ humidity_pc.propertyValue }}%</div>
                        {% elseif humidity_pc.propertyValue > 0 %}
                            <div class="stat stat-success">{{ humidity_pc.propertyValue }}%</div>
                        {% endif %}
                    </div>

                    <div class="infobox {{ hydrometer.propertyValue ? hydrometerToInfoBox(hydrometer.propertyValue) }}" title="Hydrometer">
                        <div class="infobox-icon"><i class="ace-icon fa fa-inbox brown"></i></div>

                        <div class="infobox-data">
                            <span class="infobox-data-number">{{ hydrometer }}% </span>
                            <div class="infobox-content">{{ hydrometer ? hydrometer.updatedAt | time_diff }}</div>
                        </div>
                        {% if hydrometer_pc.propertyValue < 0 %}
                            <div class="stat stat-important">{{ hydrometer_pc.propertyValue }}%</div>
                        {% elseif humidity_pc.propertyValue > 0 %}
                            <div class="stat stat-success" title="{{ hydrometer_pc.propertyValue }}">{{ hydrometer_pc.propertyValueString }}%</div>
                        {% endif %}
                    </div>

                    {% set ibox_class = plant.light? "infobox-orange" : "infobox-grey"  %}
                    <div class="infobox  {{ ibox_class }}">
                        <div class="infobox-icon"><i class="ace-icon fa fa-lightbulb-o"></i></div>
                        <div class="infobox-data">
                            <span class="badge {{ lightToBadge(plant.light) }}">{{ plant.light? "On" : "Off" }} </span>
                            <div class="infobox-content" title="{{ light? light.updatedAt | time_diff }}">Light is {{ light ? relativeTime(light.updatedAt, date(), 0)  }}m</div>
                        </div>
                    </div>

{#                    <div class="infobox infobox-light-brown">#}
{#                        <div class="infobox-icon"><i class="ace-icon fa fa-globe"></i></div>#}

{#                        <div class="infobox-data">#}
{#                            <span class="infobox-data-number">{{ plant.soilMedium }}</span>#}
{#                            <div class="infobox-content">Medium</div>#}
{#                        </div>#}
{#                    </div>#}

{#                    <div class="infobox infobox-wood">#}
{#                        <div class="infobox-icon"><i class="ace-icon fa fa-inbox"></i></div>#}

{#                        <div class="infobox-data">#}
{#                            <span class="infobox-data-number">{{ plant.pot }}</span>#}
{#                            <div class="infobox-content">Pot</div>#}
{#                        </div>#}
{#                    </div>#}

                    <div class="infobox infobox-green">
                        <div class="infobox-icon"><i class="ace-icon fa fa-calendar"></i></div>

                        <div class="infobox-data">
                            <span class="infobox-data-number">{{ plant.periodName }}</span>
                            <div class="infobox-content">Period</div>
                        </div>
                    </div>
                </div><!-- /.col -->
                <div class="col-xs-2 center">
                    <table class="table table-hover table-condensed tasks-table table-bordered" style="width: auto;">
                        <tbody>
                        <tr>
                            <th style="width: 20px;text-align: right;"><i title="Temperature" class="ace-icon fa fa-asterisk blue"></i></th>
                            <td style="">
                                <span class="badge {{ temperatureToBadge(temperature? temperature.propertyValueString | number_format : 0)}}">{{ temperature }}  &#8451;</span>
                            </td>
                            {# <td style="width: 100px;"><span class="font8">{{ temperature ? temperature.updatedAt | time_diff }}</span></td>#}
                            {# <th style="width: 100px;">Medium</th>#}
                            {# <td style="width: 100px;"><span class="badge badge-pill badge-success">{{ plant.soilMedium }}</span></td>#}
                        </tr>
                        <tr>
                            <th style="text-align: right;"><i title="Humidity" class="ace-icon fa fa-cloud grey"></i></th>
                            <td>
                                <span class="badge {{ humidityToBadge(humidity? humidity.propertyValueString| number_format : 0)}}">{{ humidity }} %</span>
                            </td>
                            {# <td style="width: 100px;"><span class="font8">{{ humidity ? humidity.updatedAt | time_diff }}</span></td>#}
                            {# <th>Pot</th>#}
                            {# <td><span class="badge badge-pill badge-secondary">{{ plant.pot }}</span></td>#}
                        </tr>
                        <tr>
                            <th style="text-align: right;"><i title="Hydrometer" class="ace-icon fa fa-inbox brown"></i></th>
                            <td>
                                <span class="badge {{ hydrometerToBadge(hydrometer.propertyValueString| number_format)}}">{{ hydrometer }} %</span>
                            </td>
                            {# <td style="width: 100px;"><span class="font8">{{ hydrometer ? hydrometer.updatedAt | time_diff }}</span></td>#}
                            {# <th>Period</th>#}
                            {# td>{{ plant.periodName }}</td>#}
                        </tr>
                        {# <tr>#}
                        {# <th style="text-align: right;"><i title="Light" class="ace-icon fa fa-lightbulb-o"></i></th>#}
                        {# <td><span class="badge {{ lightToBadge(plant.light) }}">{{ plant.light? "On" : "Off" }} </span> | <span class="badge ">{{ light.propertyValue() ? "On" : "Off" }} </span></td>#}
                        {# <td></td>#}
                        {# <th></th>#}
                        {# <td></td>#}
                        {# </tr>#}
                        </tbody>
                    </table>
                </div><!-- /.col -->
            </div><!-- /.row -->
        </div><!-- /.col -->
    </div>

    {% endapply %}

    <hr/>
    {% include 'plant/plant.sensor.html.twig' %}

    <canvas id="graph_container" style="width: 100%;height: 400px !important;"></canvas>

    <table style="width: 99%">
        <tr>
            <td>
                <button class="button btn btn-outline-warning btn-sm" type="button" id="toggleScale">Scale</button>
            </td>
            <td style="text-align: center">
                <div id="changeTime" class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups" style="width: 100%">
                    <div class="btn-group mr-2" role="group" aria-label="Time selection in day">
                        <button class="button btn btn-outline-success btn-sm" type="button" value="1">1 Hour</button>
                        <button class="button btn btn-outline-success btn-sm" type="button" value="3">3 H</button>
                        <button class="button btn btn-outline-success btn-sm" type="button" value="6">6 H</button>
                        <button class="button btn btn-outline-success btn-sm" type="button" value="12">12 H</button>
                        <button class="button btn btn-outline-success btn-sm" type="button" value="24">24 H</button>
                    </div>
                    <div class="btn-group mr-2" role="group" aria-label="Time selection">
                        <button class="button btn btn-outline-info btn-sm" type="button" value="36">36 Hours</button>
                    </div>
                    <div class="btn-group mr-2" role="group" aria-label="Time selection">
                        <button class="button btn btn-outline-dark btn-sm" type="button" value="48">2 Days</button>
                        <button class="button btn btn-outline-dark btn-sm" type="button" value="72">3 D</button>
                        <button class="button btn btn-outline-dark btn-sm" type="button" value="96">4 D</button>
                        <button class="button btn btn-outline-dark btn-sm" type="button" value="130">5 D</button>
                    </div>
                    <div class="btn-group mr-2" role="group" aria-label="Time selection">
                        <button class="button btn btn-outline-info btn-sm" type="button" value="170">1 Week</button>
                        <button class="button btn btn-outline-info btn-sm" type="button" value="340">2 W</button>
                    </div>
                    <div class="btn-group mr-2" role="group" aria-label="Time selection">
                        <button class="button btn btn-outline-primary btn-sm" type="button" value="731">1 Month</button>
                        <button class="button btn btn-outline-primary btn-sm" type="button" value="1461">2 M</button>
                        <button class="button btn btn-outline-primary btn-sm" type="button" value="2191">3 M</button>
                        <button class="button btn btn-outline-primary btn-sm" type="button" value="2921">4 M</button>
                        <button class="button btn btn-outline-primary btn-sm" type="button" value="4381">6 M</button>
                    </div>
                    <div class="btn-group" role="group" aria-label="Time selection">
                        <button class="button btn btn-outline-info btn-sm" type="button" value="8761">1 Y</button>
                    </div>
                </div>
            </td>
            <td style="text-align: right;">
                <a href="{{ path('event_new') }}">Create new Event</a>
            </td>
        </tr>
    </table>

    <script>

        // Set chart options
        var optionsHourly = {
            'title': 'Hourly',
            // 'width': 1200,
            // 'height': 400,
            timeline: {
                groupByRowLabel: true
            },
            is3D:true,
            hAxis: {
                format: 'd HH:mm',
                gridlines: {count: 24}
            },
            legend: {position: 'top', maxLines: 3}
        };


        function drawHumidityHourly() {
            var data = new google.visualization.DataTable();
            data.addColumn('datetime', 'Time');
            data.addColumn('number', 'Humidity');
            data.addRows([
                {% for id, sensor in sensorsObj %}
                {% set type = sensor.eventType | parseType %}
                {% if type == 'Humidity' %}
                {% for event in sensors[id] | slice(0, 10000) %}[new Date(Date.UTC({{ event.happenedAt|toJsDate }})),{{ event.value }}],{% endfor %}{% endif %}
                {% endfor %}
            ]);

            var newData = google.visualization.data.group(data, [{
                column: 0,
                modifier: floorDate,
                type: 'datetime'
            }], [{
                column: 1,
                label: 'HumidityAvg',
                aggregation: google.visualization.data.avg,
                type: 'number'
            }]);
            // Instantiate and draw our chart, passing in some options.
            var chart = new google.visualization.ColumnChart(document.getElementById('divHumidityHourly'));
            optionsHourly['colors'] = ['#fccd55'];
            optionsHourly['vAxis'] = {
                viewWindowMode: 'explicit',
                viewWindow: {
                    max: 100,
                    min: 0
                }
            };
            chart.draw(newData, optionsHourly);
        }

        function drawTemperatureHourly() {
            var data = new google.visualization.DataTable();
            data.addColumn('datetime', 'Time');
            data.addColumn('number', 'Temperature');
            data.addRows([
                {% for id, sensor in sensorsObj %}
                {% set type = sensor.eventType | parseType %}
                {% if type == 'Temperature' %}{% for event in sensors[id] | slice(0, 10000) %}[new Date(Date.UTC({{ event.happenedAt|toJsDate }})),{{ event.value }}],{% endfor %}{% endif %}
                {% endfor %}
            ]);

            var newData = google.visualization.data.group(data, [{
                column: 0,
                modifier: floorDate,
                type: 'datetime'
            }], [{
                column: 1,
                label: 'Temperature',
                aggregation: google.visualization.data.avg,
                type: 'number'
            }
            ]);
            // Instantiate and draw our chart, passing in some options.
            var chart = new google.visualization.ColumnChart(document.getElementById('divTemperatureHourly'));
            optionsHourly['colors'] = ['#86b9c9'];
            optionsHourly['vAxis'] = {
                viewWindowMode: 'explicit',
                viewWindow: {
                    max: 'auto',
                    min: 'auto',
                }
            };
            chart.draw(newData, optionsHourly);
        }

        /**
         *
         */
        function drawSoilHydrometerHourly() {
            var data = new google.visualization.DataTable();
            data.addColumn('datetime', 'Time');
            data.addColumn('number', 'SoilHydrometer');
            data.addRows([
                {% for id, sensor in sensorsObj %}
                {% set type = sensor.eventType | parseType %}
                {% if type == 'SoilHydrometer' %}{% for event in sensors[id] | slice(0, 10000) %}[new Date(Date.UTC({{ event.happenedAt|toJsDate }})),{{ event.value }}],{% endfor %}{% endif %}{% endfor %}
            ]);

            var newData = google.visualization.data.group(data, [{
                column: 0,
                modifier: floorDate,
                type: 'datetime'
            }], [{
                column: 1,
                label: 'HydrometerAvg',
                aggregation: google.visualization.data.avg,
                type: 'number'
            }]);
            var chart = new google.visualization.ColumnChart(document.getElementById('divSoilHydrometerHourly'));
            optionsHourly['colors'] = ['#06C3C0','#DA68A0','#657CD0','#777B80','#7C6D70','#7C0850','#F75870'];
            optionsHourly['vAxis'] = {
                viewWindowMode: 'explicit',
                viewWindow: {
                    max: 100,
                    min: 0
                }
            };
            chart.draw(newData, optionsHourly);
        }

        /**
         *
         */
        function drawFeedDaily() {
            var data = new google.visualization.DataTable();
            data.addColumn('datetime', 'Time');
            data.addColumn('number', 'Feed');
            {% set counter = 0 %}
            data.addRows([{% for event in plant.events %}
                    {% set type = event.type | parseType %}
                    {% if event.sensor is none %}{% if type == 'Feed' %}{% set counter = counter + 1 %}[new Date(Date.UTC({{ event.happenedAt|toJsDate }})),{{ event.water }}],{% endif %}{% endif %}
                {% endfor %}
            ]);

            var newData = google.visualization.data.group(data, [{
                column: 0,
                modifier: floorDateDaily,
                type: 'datetime'
            }], [{
                column: 1,
                label: 'Feed',
                aggregation: google.visualization.data.avg,
                type: 'number'
            }]);
            var chart = new google.visualization.ColumnChart(document.getElementById('divFeedDaily'));
            optionsHourly['colors'] = ['#DA68A0','#657CD0','#777B80','#7C6D70','#7C0850','#F75870'];
            optionsHourly['vAxis'] = {
                viewWindowMode: 'explicit',
                viewWindow: {
                    max: 'auto',
                    min: 'auto',
                }
            };
            optionsHourly['hAxis'] = {
                format: 'Y/MM/d',
                gridlines: {count: 70}
            };
            optionsHourly['title'] = 'Daily:' + {{ counter }};
            chart.draw(newData, optionsHourly);
        }

        $( document ).ready(function() {
            // Add button handler
            $('#changeTime').on('click','button', function (evt) {
                window.location = '{{ path('plant_show', {'id': plant.id}) }}/hours/' + this.value;
            });

            try {
                // Load graphs
                google.charts.load('current', {'packages': ['corechart']});
                google.charts.setOnLoadCallback(drawHumidityHourly);
                google.charts.setOnLoadCallback(drawTemperatureHourly);
                google.charts.setOnLoadCallback(drawSoilHydrometerHourly);
                google.charts.setOnLoadCallback(drawFeedDaily);
            } catch (e) {
                console.log('Failed to load google graphs');
                console.log(e);
            }

            try {

                $('#addComment').click(function() {
                    location.href = '{{ path('comment_new', {'id': plant.id}) }}';
                });
                $('#feedPlant').click(function() {
                    location.href = '{{ path('events_event_feed_new_with_plant', {'plant': plant.id}) }}';
                });

                $('#reloadPage').click(function() {
                    location.reload();
                });
                $('#rebootNode').click(function() {
                    location.href = '{{ path('reboot_node', {'plant': plant.id}) }}'
                });
            } catch (e) {
                console.log(e);
            }




        });

        {% include 'plant/combined.graph.js.twig' %}
    </script>

    <hr/>
    <div id="divTemperatureHourly" style="width: 100%;height: 400px !important;"></div>
    <div id="divHumidityHourly" style="width: 100%;height: 350px !important;"></div>
    <div id="divSoilHydrometerHourly" style="width: 100%;height: 300px !important;"></div>
    <div id="divFeedDaily" style="width: 100%;height: 300px !important;"></div>
    <hr/>

    {% include 'plant/plant.events.no.sensor.html.twig' %}


    <h5>All comments count {{ plant.comments | length }}</h5>
    <hr/>
    {% apply spaceless %}
        <table class="table table-hover table-striped table-condensed tasks-table table-bordered table-responsive-lg">
            <thead>
            <tr>
                <th>Name</th>
                <th>Comment</th>
                <th>Time</th>
                <th>Time</th>
                <th>User</th>
            </tr>
            </thead>
            <tbody>
            {% set counter = 0 %}
            {% for comment in plant.comments %}
                {% if counter > 1000 %}
                {% else %}
                    {% set counter = counter+1 %}
                    <tr>
                        <td title="{{ comment.id }}"><a href="{{ path('comment_show', {'id': comment.id}) }}">{{ comment.commentName| length > 0 ? comment.commentName : comment.id}}</a></td>
                        <td>{{ comment.comment }}
                        <td>{{ comment.happenedAt | time_diff }}</td>
                        <td title="{{ comment.happenedAt | date('Y/m/d H:i:s') }}">{{ comment.happenedAt | date('Y-m-d H:i') }}</td>
                        <td>{{ comment.user }}</td>
                    </tr>
                {% endif %}
            {% endfor %}
            </tbody>
        </table>
    {% endapply %}


    <hr/>
    <h5>Other</h5>
    <hr/>
    <a href="{{ path('plant_index') }}">back to list</a>

    {% if is_granted('edit', plant) %}
        <a href="{{ path('plant_edit', {'id': plant.id}) }}">edit</a>
    {% endif %}

    {#{{ include('plant/_delete_form.html.twig') }}#}
{% endblock %}
