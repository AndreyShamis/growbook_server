{% extends 'base.html.twig' %}

{% block title %}Plants{% endblock %}

{% block body %}
    <h5>Plant [{{ plant.name }}] / {{ plant.id }} / ({{ plant.uniqId }})</h5>
    {% apply spaceless %}
    <table class="table">
        <tbody>
        <tr>
            <th>Medium</th>
            <td>{{ plant.soilMedium }}</td>
            <th>Pot</th>
            <td>{{ plant.pot }}</td>
        </tr>
        <tr>
            <th>CreatedAt</th>
            <td>{{ plant.createdAt ? plant.createdAt|date('Y-m-d H:i:s') : '' }}</td>
            <th>StartedAt</th>
            <td>{{ plant.startedAt ? plant.startedAt|date('Y-m-d H:i:s') : '' }}</td>
        </tr>
        <tr>
            <th>UpdatedAt</th>
            <td>{{ plant.updatedAt ? plant.updatedAt|date('Y-m-d H:i:s') : '' }}</td>
            <th>FinishedAt</th>
            <td>{{ plant.finishedAt ? plant.finishedAt|date('Y-m-d H:i:s') : '' }}</td>
        </tr>
        </tbody>
    </table>
    {% endapply %}
    <hr/>
    <canvas id="myChart" width="400" height="100"></canvas>

    <button id="toggleScale">Toggle Scale Type</button>
    <a href="{{ path('event_new') }}">Create new</a>
    <script>
        var color = Chart.helpers.color;
        var my_color = window.chartColors.red;
        var fill_val = false;

        function CustomOnClickAction(e, legendItem) {
            var index = legendItem.datasetIndex;
            var ci = this.chart;
            var meta = ci.getDatasetMeta(index);

            // See controller.isDatasetVisible comment
            meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;

            // We hid a dataset ... rerender the chart
            ci.update();
        }

        var config = {
            type: 'line',
            data: {
                datasets: [
                    {% for sensor in plant.sensors%}
                    {% set type = sensor.eventType | parseType %}
                    {% set color = 'window.chartColors.red' %}
                    {% if type == 'Humidity' %}{% set color = 'window.chartColors.yellow' %}{% endif %}
                    {% if type == 'Temperature' %}{% set color = 'window.chartColors.blue' %}{% endif %}
                    {% if type == 'Event' %}{% set color = 'window.chartColors.purple' %}{% endif %}
                    {#{% if type == 'Humidity' %}#}
                    {#my_color = window.chartColors.yellow;#}
                    {#fill_val = true;#}
                    {#{% endif %}#}
                    {#{% if type == 'Temperature' %}#}
                    {#my_color = window.chartColors.blue;#}
                    {#{% endif %}#}
                    {
                    label: '{{ sensor.name }}',
                    backgroundColor: color({{ color }}).alpha(0.25).rgbString(),
                    borderColor: {{ color }},
                    fill: {{ type == 'Humidity' ? 'true' : 'false' }},
                    lineTension: 0,
                    borderWidth: 2,
                    sensorType: '{{ sensor.eventType | parseType }}',
                    data:[{% for event in sensor.events | slice(0, 300)%}{x:'{{ event.createdAt|date('Y-m-d H:i:s') }}',y:{{ event.value }},},{% endfor %}],
                    //pointStyle: 'rectRot',
                    pointRadius: 5,
                    //pointBorderColor: 'rgb(0, 0, 0)'
                    },{% endfor %}
                ]
            },
            options: {
                legend: {
                    display: true,
                    position: 'right',
                    onClick: CustomOnClickAction,
                    labels: {
                        fontColor: 'rgb(255, 99, 132)',
                        fontSize: 18,
                        fontFamily: 'Helvetica',
                        usePointStyle: true,
                        fontStyle: 'normal'
                    }
                },
                responsive: true,
                title: {
                    display: true,
                    text: ' [{{ plant.name }}]'
                },
                scales: {
                    xAxes: [{
                        type: 'time',
                        display: true,
                        time: {
                            unit: 'quarter',
                            displayFormats: {
                                quarter: 'D/M H:mm'  // https://www.chartjs.org/docs/latest/axes/cartesian/time.html
                            }
                        },
                        distribution: 'series',
                        scaleLabel: {
                            display: true,
                            labelString: 'Date'
                        },
                        ticks: {
                            source: 'data',  // add timeprint on bottom for each points
                            autoSkip: true,
                            major: {
                                fontStyle: 'bold',
                                fontColor: '#FF0000'
                            }
                        }
                    }],
                    yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'value'
                        }
                    }]
                },
                tooltips: {
                    intersect: false,
                    mode: 'point',
                    callbacks: {
                        label: function(tooltipItem, myData) {
                            var obj = myData.datasets[tooltipItem.datasetIndex];
                            var label = obj.label || '';
                            if (label) {
                                label += '         ';
                            }
                            label += obj['sensorType'] + ':' + parseFloat(tooltipItem.value); // .toFixed(4)
                            return label;
                        }
                    }
                }
            }
        };
        var scaleType = 'linear';
        window.onload = function() {
            var ctx = $('#myChart');
            window.myLine = new Chart(ctx, config);
        };
        //
        // document.getElementById('randomizeData').addEventListener('click', function() {
        //     config.data.datasets.forEach(function(dataset) {
        //         dataset.data.forEach(function(dataObj) {
        //             dataObj.y = randomScalingFactor();
        //         });
        //     });
        //
        //     window.myLine.update();
        // });
        // document.getElementById('addData').addEventListener('click', function() {
        //     if (config.data.datasets.length > 0) {
        //         config.data.datasets[0].data.push({
        //             x: newDateString(config.data.datasets[0].data.length + 2),
        //             y: randomScalingFactor()
        //         });
        //         config.data.datasets[1].data.push({
        //             x: newDate(config.data.datasets[1].data.length + 2),
        //             y: randomScalingFactor()
        //         });
        //
        //         window.myLine.update();
        //     }
        // });
        //
        // document.getElementById('removeData').addEventListener('click', function() {
        //     config.data.datasets.forEach(function(dataset) {
        //         dataset.data.pop();
        //     });
        //
        //     window.myLine.update();
        // });
        document.getElementById('toggleScale').addEventListener('click', function() {
            scaleType = scaleType === 'linear' ? 'logarithmic' : 'linear';
            //window.myLine.options.title.text = 'Chart.js Line Chart - ' + scaleType;
            window.myLine.options.scales.yAxes[0] = {
                display: true,
                type: scaleType
            };

            window.myLine.update();
        });
    </script>
    <h5>Sensors {{ plant.sensors | length }}</h5>
    <hr/>
    {% apply spaceless %}
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Type</th>
                <th>Last Value</th>
                <th>Last Time</th>
                <th>Count</th>
                <th>TH</th>
                <th>Force sec</th>
                <th>UniqID</th>
            </tr>
        </thead>
        <tbody>
        {% for sensor in plant.sensors | slice(0, 100)%}
            <tr>
                <td>{{ sensor.id }}</td>
                <td><a href="{{ path('sensor_show', {'id': sensor.id}) }}" target="_blank">{{ sensor.name }}</a></td>
                <td>{{ sensor.eventType | parseType }}</td>
                <td>
                    {% if sensor.supportEvents and sensor.lastEvent is defined %}
                    {{ sensor.lastEvent.value }}
                    {% endif %}
                </td>
                <td title="{{ sensor.lastEvent.createdAt | date('Y-m-d H:i:s')}} ">
                    {% if sensor.supportEvents and sensor.lastEvent is defined %}
                        {{ sensor.lastEvent.createdAt | date('H:i:s')}} | {{ sensor.lastEvent.createdAt | time_diff}}
                    {% endif %}
                </td>
                <td>{{ sensor.events | length }}</td>
                <td>{{ sensor.diffThreshold }}</td>
                <td>{{ sensor.writeForceEveryXseconds }}</td>
                <td>{{ sensor.uniqId }}</td>
            </tr>
        {% endfor %}
        </tbody>
    </table>
    {% endapply %}
    <hr/>
    <h5>Events without sensor | All events count {{ plant.events | length }}</h5>
    <hr/>
    {% apply spaceless %}
    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Type</th>
            <th>Value</th>
        </tr>
        </thead>
        <tbody>
        {% set counter = 0 %}
        {% for event in plant.events %}
            {% if counter > 1000 %}
            {% else %}
                {% if event.sensor is none %}
                    {% set counter = counter+1 %}
                    <tr>
                        <td>{{ event.id }}</td>
                        <td><a href="{{ path('event_show', {'id': event.id}) }}" target="_blank">{{ event.name }}</a></td>
                        <td>{{ event.type | parseType }}</td>
                        <td>{{ event.value }}</td>
                    </tr>
                {% endif %}
            {% endif %}
        {% endfor %}
        </tbody>
    </table>
    {% endapply %}
    <hr/>
    <h5>Other</h5>
    <hr/>
    <a href="{{ path('plant_index') }}">back to list</a>

    <a href="{{ path('plant_edit', {'id': plant.id}) }}">edit</a>

    {#{{ include('plant/_delete_form.html.twig') }}#}
{% endblock %}
