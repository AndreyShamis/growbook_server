{% extends 'base.html.twig' %}

{% block title %}Plants{% endblock %}

{% block body %}
    <div class="alert alert-success" role="alert">
        <h5>Plant [{{ plant.name }}]</h5>
    </div>
    <div class="alert alert-info" role="alert">
        <p class="mb-0">ID:{{ plant.id }} / Hostname:({{ plant.uniqId }})
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            uptime: {{ plant.uptime }} | {{ plant.uptime | ExecutionTimeWithDays }}
            &nbsp;&nbsp;/&nbsp;&nbsp;
            {{ uptime }} | {%  if uptime.propertyValue is defined and uptime.propertyValue is not null %} {{  uptime.propertyValue  | ExecutionTimeWithDays }} {% endif %}
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            Updated {{ plant.updatedAt ? plant.updatedAt | time_diff }}
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            resets: {{ plant.resetCounter }}
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            RSSI: {{ plant.rssi }}
            Version: {{ plant.version }}
            &nbsp;&nbsp;&nbsp;&nbsp;
            <input type="button" id="reloadPage" value="&nbsp;&nbsp;&nbsp;Reload&nbsp;&nbsp;&nbsp;" /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <input type="button" id="rebootNode" value="Reboot" />
        </p>
    </div>

    {% apply spaceless %}
    <table class="table table-hover table-condensed tasks-table table-bordered">
        <tbody>
        <tr>
            <th style="width: 120px;">Temperature</th>
            <td style="width: 160px;">
                <span class="badge {{ temperatureToBadge(temperature? temperature.propertyValueString | number_format : 0)}}">
                    {{ temperature }}  &#8451;
                </span>
                <span class="font8">{{ temperature ? temperature.updatedAt | time_diff }}</span>
            </td>
            <th style="width: 100px;">Medium</th>
            <td style="width: 100px;"><span class="badge badge-pill badge-success">{{ plant.soilMedium }}</span></td>
            <th style="width: 120px;">CreatedAt</th>
            <td>{{ plant.createdAt ? plant.createdAt|date('Y-m-d') : '' }}</td>
        </tr>
        <tr>
            <th>Humidity</th>
            <td>
                <span class="badge {{ humidityToBadge(humidity? humidity.propertyValueString| number_format : 0)}}">
                    {{ humidity }} %
                </span>
                <span class="font8">{{ humidity ? humidity.updatedAt | time_diff }}</span>
            </td>
            <th>Pot</th>
            <td><span class="badge badge-pill badge-secondary">{{ plant.pot }}</span></td>
            <th>StartedAt</th>
            <td><strong title="{{ plant.startedAt ? plant.startedAt|date('Y-m-d') : '' }} | {{ plant.startedAt ? plant.startedAt | time_diff }}">{{ days }}</strong></td>
        </tr>
        <tr>
            <th>Hydrometer</th>
            <td>
                <span class="badge {{ hydrometerToBadge(hydrometer.propertyValueString| number_format)}}">
                    {{ hydrometer }} %
                </span>
                <span class="font8">{{ hydrometer ? hydrometer.updatedAt | time_diff }}</span>
            </td>
            <th>Period</th>
            <td>{{ plant.periodName }}</td>
            <th>FinishedAt</th>
            <td><strong>~ {{ toFinishDays }}</strong>  {{ plant.finishedAt ? plant.finishedAt|date('Y-m-d') : '' }}</td>
        </tr>
        <tr>
            <th>Light</th>
            <td><span class="badge {{ lightToBadge(plant.light) }}">{{ plant.light? "On" : "Off" }} </span> | <span class="badge ">{{ light.propertyValue() ? "On" : "Off" }} </span></td>
            <th></th>
            <td></td>
            <th>UpdatedAt</th>
            <td>{{ plant.updatedAt ? plant.updatedAt|date('m-d H:i') : '' }} | {{ plant.updatedAt ? plant.updatedAt | time_diff }}</td>
        </tr>
        </tbody>
    </table>
    {% endapply %}
    <hr/>

    <canvas id="graph_container" style="width: 100%;height: 400px !important;"></canvas>

    <table style="width: 99%">
        <tr>
            <td>
                <button class="button btn btn-outline-warning btn-sm" type="button" id="toggleScale">Toggle Scale Type</button>
            </td>
            <td style="text-align: center">
                <div id="changeTime" class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups" style="width: 100%">
                    <div class="btn-group mr-2" role="group" aria-label="Time selection in day">
                        <button class="button btn btn-outline-success btn-sm" type="button" value="1">1 Hour</button>
                        <button class="button btn btn-outline-success btn-sm" type="button" value="3">3 H</button>
                        <button class="button btn btn-outline-success btn-sm" type="button" value="6">6 H</button>
                        <button class="button btn btn-outline-success btn-sm" type="button" value="12">12 H</button>
                        <button class="button btn btn-outline-success btn-sm" type="button" value="24">24 H</button>
                    </div>
                    <div class="btn-group mr-2" role="group" aria-label="Time selection">
                        <button class="button btn btn-outline-info btn-sm" type="button" value="36">36 Hours</button>
                    </div>
                    <div class="btn-group mr-2" role="group" aria-label="Time selection">
                        <button class="button btn btn-outline-dark btn-sm" type="button" value="48">2 Days</button>
                        <button class="button btn btn-outline-dark btn-sm" type="button" value="72">3 D</button>
                        <button class="button btn btn-outline-dark btn-sm" type="button" value="96">4 D</button>
                        <button class="button btn btn-outline-dark btn-sm" type="button" value="130">5 D</button>
                    </div>
                    <div class="btn-group mr-2" role="group" aria-label="Time selection">
                        <button class="button btn btn-outline-info btn-sm" type="button" value="170">1 Week</button>
                        <button class="button btn btn-outline-info btn-sm" type="button" value="340">2 W</button>
                    </div>
                    <div class="btn-group mr-2" role="group" aria-label="Time selection">
                        <button class="button btn btn-outline-primary btn-sm" type="button" value="731">1 Month</button>
                        <button class="button btn btn-outline-primary btn-sm" type="button" value="1461">2 M</button>
                        <button class="button btn btn-outline-primary btn-sm" type="button" value="2191">3 M</button>
                        <button class="button btn btn-outline-primary btn-sm" type="button" value="2921">4 M</button>
                        <button class="button btn btn-outline-primary btn-sm" type="button" value="4381">6 M</button>
                    </div>
                    <div class="btn-group" role="group" aria-label="Time selection">
                        <button class="button btn btn-outline-info btn-sm" type="button" value="8761">1 Y</button>
                    </div>
                </div>
            </td>
            <td style="text-align: right;">
                <a href="{{ path('event_new') }}">Create new Event</a>
            </td>
        </tr>
    </table>

    <script>

        // Set chart options
        var optionsHourly = {
            'title': 'Hourly',
            // 'width': 1200,
            // 'height': 400,
            timeline: {
                groupByRowLabel: true
            },
            is3D:true,
            hAxis: {
                format: 'd HH:mm',
                gridlines: {count: 24}
            },
            legend: {position: 'top', maxLines: 3}
        };


        function drawHumidityHourly() {
            var data = new google.visualization.DataTable();
            data.addColumn('datetime', 'Time');
            data.addColumn('number', 'Humidity');
            data.addRows([
                {% for id, sensor in sensorsObj %}
                {% set type = sensor.eventType | parseType %}
                {% if type == 'Humidity' %}
                {% for event in sensors[id] | slice(0, 10000) %}[new Date({{ event.happenedAt|date('Y, m, d, H, i, 0') }}),{{ event.value }}],{% endfor %}{% endif %}
                {% endfor %}
            ]);

            var newData = google.visualization.data.group(data, [{
                column: 0,
                modifier: floorDate,
                type: 'datetime'
            }], [{
                column: 1,
                label: 'HumidityAvg',
                aggregation: google.visualization.data.avg,
                type: 'number'
            }]);
            // Instantiate and draw our chart, passing in some options.
            var chart = new google.visualization.ColumnChart(document.getElementById('divHumidityHourly'));
            optionsHourly['colors'] = ['#fccd55'];
            optionsHourly['vAxis'] = {
                viewWindowMode: 'explicit',
                viewWindow: {
                    max: 100,
                    min: 0
                }
            };
            chart.draw(newData, optionsHourly);
        }

        function drawTemperatureHourly() {
            var data = new google.visualization.DataTable();
            data.addColumn('datetime', 'Time');
            data.addColumn('number', 'Temperature');
            data.addRows([
                {% for id, sensor in sensorsObj %}
                {% set type = sensor.eventType | parseType %}
                {% if type == 'Temperature' %}{% for event in sensors[id] | slice(0, 10000) %}[new Date({{ event.happenedAt|date('Y, m, d, H, i, 0') }}),{{ event.value }}],{% endfor %}{% endif %}
                {% endfor %}
            ]);

            var newData = google.visualization.data.group(data, [{
                column: 0,
                modifier: floorDate,
                type: 'datetime'
            }], [{
                column: 1,
                label: 'Temperature',
                aggregation: google.visualization.data.avg,
                type: 'number'
            }
            ]);
            // Instantiate and draw our chart, passing in some options.
            var chart = new google.visualization.ColumnChart(document.getElementById('divTemperatureHourly'));
            optionsHourly['colors'] = ['#86b9c9'];
            optionsHourly['vAxis'] = {
                viewWindowMode: 'explicit',
                viewWindow: {
                    max: 'auto',
                    min: 'auto',
                }
            };
            chart.draw(newData, optionsHourly);
        }

        /**
         *
         */
        function drawSoilHydrometerHourly() {
            var data = new google.visualization.DataTable();
            data.addColumn('datetime', 'Time');
            data.addColumn('number', 'SoilHydrometer');
            data.addRows([
                {% for id, sensor in sensorsObj %}
                {% set type = sensor.eventType | parseType %}
                {% if type == 'SoilHydrometer' %}{% for event in sensors[id] | slice(0, 10000) %}[new Date({{ event.happenedAt|date('Y, m, d, H, i, 0') }}),{{ event.value }}],{% endfor %}{% endif %}{% endfor %}
            ]);

            var newData = google.visualization.data.group(data, [{
                column: 0,
                modifier: floorDate,
                type: 'datetime'
            }], [{
                column: 1,
                label: 'HydrometerAvg',
                aggregation: google.visualization.data.avg,
                type: 'number'
            }]);
            var chart = new google.visualization.ColumnChart(document.getElementById('divSoilHydrometerHourly'));
            optionsHourly['colors'] = ['#06C3C0','#DA68A0','#657CD0','#777B80','#7C6D70','#7C0850','#F75870'];
            optionsHourly['vAxis'] = {
                viewWindowMode: 'explicit',
                viewWindow: {
                    max: 100,
                    min: 0
                }
            };
            chart.draw(newData, optionsHourly);
        }

        /**
         *
         */
        function drawFeedDaily() {
            var data = new google.visualization.DataTable();
            data.addColumn('datetime', 'Time');
            data.addColumn('number', 'Feed');
            data.addRows([
                {% set counter = 0 %}
                {% for event in plant.events %}
                    {% set type = event.type | parseType %}
                    {% if event.sensor is none %}{% if type == 'Feed' %}{% set counter = counter + 1 %}[new Date({{ event.happenedAt|date('Y, m, d, H, i') }}),{{ event.water }}],{% endif %}{% endif %}
                {% endfor %}
            ]);

            var newData = google.visualization.data.group(data, [{
                column: 0,
                modifier: floorDateDaily,
                type: 'datetime'
            }], [{
                column: 1,
                label: 'Feed',
                aggregation: google.visualization.data.avg,
                type: 'number'
            }]);
            var chart = new google.visualization.ColumnChart(document.getElementById('divFeedDaily'));
            optionsHourly['colors'] = ['#DA68A0','#657CD0','#777B80','#7C6D70','#7C0850','#F75870'];
            optionsHourly['vAxis'] = {
                viewWindowMode: 'explicit',
                viewWindow: {
                    max: 'auto',
                    min: 'auto',
                }
            };
            optionsHourly['hAxis'] = {
                format: 'Y/MM/d',
                gridlines: {count: 70}
            };
            optionsHourly['title'] = 'Daily:' + {{ counter }};
            chart.draw(newData, optionsHourly);
        }

        $( document ).ready(function() {
            // Add button handler
            $('#changeTime').on('click','button', function (evt) {
                window.location = '{{ path('plant_show', {'id': plant.id}) }}/hours/' + this.value;
            });
            // Load graphs
            google.load('visualization', '1.1', {'packages': ['corechart']});
            google.setOnLoadCallback(drawHumidityHourly);
            google.setOnLoadCallback(drawTemperatureHourly);
            google.setOnLoadCallback(drawSoilHydrometerHourly);
            google.setOnLoadCallback(drawFeedDaily);

            $('#reloadPage').click(function() {
                location.reload();
            });
            $('#rebootNode').click(function() {
                location.href = '{{ path('reboot_node', {'plant': plant.id}) }}'
            });


        });

        {% include 'plant/combined.graph.js.twig' %}
    </script>

    {% include 'plant/plant.sensor.html.twig' %}
    <hr/>
    {% include 'plant/plant.events.no.sensor.html.twig' %}
    {% include 'plant/plant.custom.fields.html.twig' %}

    <hr/>
    <h5>Other</h5>
    <hr/>
    <a href="{{ path('plant_index') }}">back to list</a>

    {% if is_granted('edit', plant) %}
        <a href="{{ path('plant_edit', {'id': plant.id}) }}">edit</a>
    {% endif %}

    {#{{ include('plant/_delete_form.html.twig') }}#}
{% endblock %}
