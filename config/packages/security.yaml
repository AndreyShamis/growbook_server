security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    encoders:
        App\Entity\User: bcrypt
    providers:
        our_db_provider:
            entity:
                class: App\Entity\User
                #property: username
        # https://symfony.com/doc/current/security/ldap.html
        in_memory: { memory: ~ }
    firewalls:
        login:
            pattern:  ^/login$
            security: false
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            #pattern:    ^/
            #http_basic: ~
            anonymous: ~
            logout:
                path:                 /logout
                target:               /
                success_handler:      ~
                invalidate_session:   true
                delete_cookies:
                    name:
                        path:                 null
                        domain:               null
                handlers:             []
            form_login:
                use_referer: true
                login_path: login
                #check_path: login
                #default_target_path: home_index
                #always_use_default_target_path: true

            provider: our_db_provider

            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html
    role_hierarchy:
        ROLE_ADMIN:       [ROLE_USER, ROLE_EVENT_CREATE]
        ROLE_SUPER_ADMIN: [ROLE_USER, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, role: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: "%http_protocol%" }
        - { path: ^/register$, role: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: "%http_protocol%"  }
        - { path: ^/event/new(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/plant/cli(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/plant/read_cmd(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/bot/(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/, role: IS_AUTHENTICATED_FULLY }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
